diff -up bsnes_v079-source/bsnes/libco/amd64.c.crashfix bsnes_v079-source/bsnes/libco/amd64.c
--- bsnes_v079-source/bsnes/libco/amd64.c.crashfix	2011-06-04 05:55:17.000000000 +0200
+++ bsnes_v079-source/bsnes/libco/amd64.c	2011-06-21 00:09:44.398210519 +0200
@@ -13,52 +13,94 @@
 extern "C" {
 #endif
 
+// ASM co_swap.
+void co_swap(cothread_t new_active, cothread_t old_active);
+
 static thread_local long long co_active_buffer[64];
 static thread_local cothread_t co_active_handle = 0;
-static void (*co_swap)(cothread_t, cothread_t) = 0;
 
 #ifdef _WIN32
-  //ABI: Win64
-  static unsigned char co_swap_function[] = {
-    0x48, 0x89, 0x22, 0x48, 0x8B, 0x21, 0x58, 0x48, 0x89, 0x6A, 0x08, 0x48, 0x89, 0x72, 0x10, 0x48,
-    0x89, 0x7A, 0x18, 0x48, 0x89, 0x5A, 0x20, 0x4C, 0x89, 0x62, 0x28, 0x4C, 0x89, 0x6A, 0x30, 0x4C,
-    0x89, 0x72, 0x38, 0x4C, 0x89, 0x7A, 0x40, 0x48, 0x81, 0xC2, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83,
-    0xE2, 0xF0, 0x0F, 0x29, 0x32, 0x0F, 0x29, 0x7A, 0x10, 0x44, 0x0F, 0x29, 0x42, 0x20, 0x44, 0x0F,
-    0x29, 0x4A, 0x30, 0x44, 0x0F, 0x29, 0x52, 0x40, 0x44, 0x0F, 0x29, 0x5A, 0x50, 0x44, 0x0F, 0x29,
-    0x62, 0x60, 0x44, 0x0F, 0x29, 0x6A, 0x70, 0x44, 0x0F, 0x29, 0xB2, 0x80, 0x00, 0x00, 0x00, 0x44,
-    0x0F, 0x29, 0xBA, 0x90, 0x00, 0x00, 0x00, 0x48, 0x8B, 0x69, 0x08, 0x48, 0x8B, 0x71, 0x10, 0x48,
-    0x8B, 0x79, 0x18, 0x48, 0x8B, 0x59, 0x20, 0x4C, 0x8B, 0x61, 0x28, 0x4C, 0x8B, 0x69, 0x30, 0x4C,
-    0x8B, 0x71, 0x38, 0x4C, 0x8B, 0x79, 0x40, 0x48, 0x81, 0xC1, 0x80, 0x00, 0x00, 0x00, 0x48, 0x83,
-    0xE1, 0xF0, 0x0F, 0x29, 0x31, 0x0F, 0x29, 0x79, 0x10, 0x44, 0x0F, 0x29, 0x41, 0x20, 0x44, 0x0F,
-    0x29, 0x49, 0x30, 0x44, 0x0F, 0x29, 0x51, 0x40, 0x44, 0x0F, 0x29, 0x59, 0x50, 0x44, 0x0F, 0x29,
-    0x61, 0x60, 0x44, 0x0F, 0x29, 0x69, 0x70, 0x44, 0x0F, 0x29, 0xB1, 0x80, 0x00, 0x00, 0x00, 0x44,
-    0x0F, 0x29, 0xB9, 0x90, 0x00, 0x00, 0x00, 0xFF, 0xE0,
-  };
-
-  #include <windows.h>
-
-  void co_init() {
-    DWORD old_privileges;
-    VirtualProtect(co_swap_function, sizeof co_swap_function, PAGE_EXECUTE_READWRITE, &old_privileges);
-  }
+asm (
+      ".text\n"
+      ".globl co_swap\n"
+      "co_swap:\n"
+
+      "movq %rsp, (%rdx) # Save stack pointer and pop old back\n"
+      "movq (%rcx), %rsp\n"
+
+      "popq %rax # Pop saved PC to %rax\n"
+
+      "movq %rbp, 0x8(%rdx) # Save non-volatile registers\n"
+      "movq %rsi, 0x10(%rdx)\n"
+      "movq %rdi, 0x18(%rdx)\n"
+      "movq %rbx, 0x20(%rdx)\n"
+      "movq %r12, 0x28(%rdx)\n"
+      "movq %r13, 0x30(%rdx)\n"
+      "movq %r14, 0x38(%rdx)\n"
+      "movq %r15, 0x40(%rdx)\n"
+
+      "addq $0x80, %rdx\n"
+      "andq $0xfffffffffffffff0, %rdx # Align buffer to 16 bytes (SSE).\n"
+      "movaps %xmm6, (%rdx) # Also save non-volatile vector registers.\n"
+      "movaps %xmm7, 0x10(%rdx)\n"
+      "movaps %xmm8, 0x20(%rdx)\n"
+      "movaps %xmm9, 0x30(%rdx)\n"
+      "movaps %xmm10, 0x40(%rdx)\n"
+      "movaps %xmm11, 0x50(%rdx)\n"
+      "movaps %xmm12, 0x60(%rdx)\n"
+      "movaps %xmm13, 0x70(%rdx)\n"
+      "movaps %xmm14, 0x80(%rdx)\n"
+      "movaps %xmm15, 0x90(%rdx)\n"
+
+      "movq 0x8(%rcx),  %rbp # Pop back our saved registers and vector registers.\n"
+      "movq 0x10(%rcx), %rsi\n"
+      "movq 0x18(%rcx), %rdi\n"
+      "movq 0x20(%rcx), %rbx\n"
+      "movq 0x28(%rcx), %r12\n"
+      "movq 0x30(%rcx), %r13\n"
+      "movq 0x38(%rcx), %r14\n"
+      "movq 0x40(%rcx), %r15\n"
+
+      "addq $0x80, %rcx\n"
+      "andq $0xfffffffffffffff0, %rcx\n"
+      "movaps %xmm6, (%rcx)\n"
+      "movaps %xmm7, 0x10(%rcx)\n"
+      "movaps %xmm8, 0x20(%rcx)\n"
+      "movaps %xmm9, 0x30(%rcx)\n"
+      "movaps %xmm10, 0x40(%rcx)\n"
+      "movaps %xmm11, 0x50(%rcx)\n"
+      "movaps %xmm12, 0x60(%rcx)\n"
+      "movaps %xmm13, 0x70(%rcx)\n"
+      "movaps %xmm14, 0x80(%rcx)\n"
+      "movaps %xmm15, 0x90(%rcx)\n"
+      "jmpq *%rax # Jump back to old saved PC.\n"
+);
 #else
-  //ABI: SystemV
-  static unsigned char co_swap_function[] = {
-    0x48, 0x89, 0x26, 0x48, 0x8B, 0x27, 0x58, 0x48, 0x89, 0x6E, 0x08, 0x48, 0x89, 0x5E, 0x10, 0x4C,
-    0x89, 0x66, 0x18, 0x4C, 0x89, 0x6E, 0x20, 0x4C, 0x89, 0x76, 0x28, 0x4C, 0x89, 0x7E, 0x30, 0x48,
-    0x8B, 0x6F, 0x08, 0x48, 0x8B, 0x5F, 0x10, 0x4C, 0x8B, 0x67, 0x18, 0x4C, 0x8B, 0x6F, 0x20, 0x4C,
-    0x8B, 0x77, 0x28, 0x4C, 0x8B, 0x7F, 0x30, 0xFF, 0xE0,
-  };
-
-  #include <unistd.h>
-  #include <sys/mman.h>
-
-  void co_init() {
-    unsigned long long addr = (unsigned long long)co_swap_function;
-    unsigned long long base = addr - (addr % sysconf(_SC_PAGESIZE));
-    unsigned long long size = (addr - base) + sizeof co_swap_function;
-    mprotect((void*)base, size, PROT_READ | PROT_WRITE | PROT_EXEC);
-  }
+asm (
+      ".text\n"
+      ".globl co_swap\n"
+      ".globl _co_swap\n"
+      "_co_swap:\n"
+      "co_swap:\n"
+      "movq %rsp, (%rsi) # Save stack pointer, and pop the old one back.\n"
+      "movq (%rdi), %rsp\n"
+      "popq %rax\n"
+
+      "movq %rbp, 0x8(%rsi) # Save our non-volatile registers to buffer.\n"
+      "movq %rbx, 0x10(%rsi)\n"
+      "movq %r12, 0x18(%rsi)\n"
+      "movq %r13, 0x20(%rsi)\n"
+      "movq %r14, 0x28(%rsi)\n"
+      "movq %r15, 0x30(%rsi)\n"
+
+      "movq 0x8(%rdi),  %rbp # Pop back our saved registers.\n"
+      "movq 0x10(%rdi), %rbx\n"
+      "movq 0x18(%rdi), %r12\n"
+      "movq 0x20(%rdi), %r13\n"
+      "movq 0x28(%rdi), %r14\n"
+      "movq 0x30(%rdi), %r15\n"
+      "jmpq *%rax # Jump back to saved PC.\n"
+);
 #endif
 
 static void crash() {
@@ -72,15 +114,11 @@ cothread_t co_active() {
 
 cothread_t co_create(unsigned int size, void (*entrypoint)(void)) {
   cothread_t handle;
-  if(!co_swap) {
-    co_init();
-    co_swap = (void (*)(cothread_t, cothread_t))co_swap_function;
-  }
   if(!co_active_handle) co_active_handle = &co_active_buffer;
   size += 512; /* allocate additional space for storage */
   size &= ~15; /* align stack to 16-byte boundary */
 
-  if(handle = (cothread_t)malloc(size)) {
+  if((handle = (cothread_t)malloc(size))) {
     long long *p = (long long*)((char*)handle + size); /* seek to top of stack */
     *--p = (long long)crash;                           /* crash if entrypoint returns */
     *--p = (long long)entrypoint;                      /* start of function */
